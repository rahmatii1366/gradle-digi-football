package {{invokerPackage}};

import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.MultiMap;

import ir.piana.dev.core.api.exception.ApiBaseException;

import java.util.Map;

public class ApiException extends ApiBaseException {

    public ApiException(Integer statusCode, String code) {
        super(statusCode, code);
    }

    public ApiException(Integer statusCode, String code, Map<String, Object> params) {
        super(statusCode, code, params);
    }

    public ApiException(Integer statusCode, Throwable cause, String code) {
        super(statusCode, cause, code);
    }

    public ApiException(Integer statusCode, Throwable cause, String code, Map<String, Object> params) {
        super(statusCode, cause, code, params);
    }

    public static <T> AsyncResult<T> fail(ApiException cause) {
        return Future.failedFuture(cause);
    }

    public static <T> AsyncResult<T> fail(Integer statusCode, String code) {
        return Future.failedFuture(new ApiException(statusCode, code));
    }


    public static <T> AsyncResult<T> fail(Integer statusCode, String code, Map<String, Object> params) {
        return Future.failedFuture(new ApiException(statusCode, code, params));
    }

    public static <T> AsyncResult<T> fail(Throwable cause, Integer statusCode, String code) {
        return Future.failedFuture(new ApiException(statusCode, cause, code));
    }

    public static <T> AsyncResult<T> fail(Throwable cause, Integer statusCode, String code, Map<String, Object> params) {
        return Future.failedFuture(new ApiException(statusCode, cause, code, params));
    }
}
